---
- name: Playbook to create custom awx configration
  hosts: k3s_cluster
  gather_facts: false
  vars_files:
    - ../../global_vars/awx_config_vars.yaml
  collections:
    - awx.awx

  tasks:
    - name: Create awx auth variables
      shell: |
        echo "http://{{ lookup('dig', ansible_host) }}:$(sudo k3s kubectl get service awx-service -n awx -o yaml | grep nodePort | awk '{print $2}' )"
        echo "$(sudo k3s kubectl get secret awx-admin-password -o jsonpath="{.data.password}" -n awx | base64 --decode)"
      register: awx_auth
      become: true
    
    - name: Create a new organization
      organization:
        name: "{{ set_tower_organization_name }}"
        description: "{{ set_tower_organization_name }}"
        state: present
      environment:
        TOWER_HOST: "{{ awx_auth.stdout_lines[0] }}"
        TOWER_USERNAME: "admin"
        TOWER_PASSWORD: "{{ awx_auth.stdout_lines[1] }}"
    
    - name: Create an Inventory
      inventory:
        name: "{{ set_remote_server_inventory_name }}"
        description: "{{ set_remote_server_inventory_name }}"
        organization: "{{ set_tower_organization_name }}"
        state: present
        variables:
          ansible_connection: ssh
          ansible_user: "{{ set_remote_server_ansible_user }}"
      environment:
        TOWER_HOST: "{{ awx_auth.stdout_lines[0] }}"
        TOWER_USERNAME: "admin"
        TOWER_PASSWORD: "{{ awx_auth.stdout_lines[1] }}"

    - name: Create a Host
      host:
        name: "{{ set_remote_server_host_name }}"
        inventory: "{{ set_remote_server_inventory_name }}"
        state: present
        variables:
          ansible_host: "{{ set_remote_server_host_url }}"
      environment:
        TOWER_HOST: "{{ awx_auth.stdout_lines[0] }}"
        TOWER_USERNAME: "admin"
        TOWER_PASSWORD: "{{ awx_auth.stdout_lines[1] }}"

    - name: Create a Project
      project:
        name: "{{ set_tower_project_name }}"
        organization: "{{ set_tower_organization_name }}"
        scm_type: git
        scm_url: "{{ set_tower_project_git_url }}"
      environment:
        TOWER_HOST: "{{ awx_auth.stdout_lines[0] }}"
        TOWER_USERNAME: "admin"
        TOWER_PASSWORD: "{{ awx_auth.stdout_lines[1] }}"

    # - name: Create Credential Types
    #   uri:
    #     method: POST
    #     body_format: json
    #     status_code: [200, 201, 202]
    #     url: "{{ awx_auth.stdout_lines[0] }}/api/v2/credential_types/"
    #     user: "admin"
    #     password: "{{ awx_auth.stdout_lines[1] }}"
    #     body: "{\"type\":\"credential_type\",\"name\": \"{{ set_tower_database_credential_type_name }}\" ,\"description\": \"\" ,\"kind\":\"cloud\",\"managed\":false,\"inputs\":{\"fields\":[{\"id\":\"db_name\",\"type\":\"string\",\"label\":\"DB name\",\"secret\":false},{\"id\":\"db_user_name\",\"type\":\"string\",\"label\":\"DB user name\",\"secret\":false},{\"id\":\"db_user_password\",\"type\":\"string\",\"label\":\"DB user password\",\"secret\":true}],\"required\":[\"db_name\",\"db_user_name\",\"db_user_password\"]},\"injectors\":{\"extra_vars\":{\"db_name\":\"{{ db_name }}\",\"db_user_name\":\"{{ db_user_name }}\",\"db_user_password\":\"{{ db_user_password }}\" }}}"
    #     validate_certs: False
    #     force_basic_auth: yes
    #   register: outcome

    # - name: Create Credential Types - post
    #   uri:
    #     url: "{{ awx_auth.stdout_lines[0] }}/api/v2/credential_types/"
    #     method: POST
    #     body_format: json
    #     status_code: [200, 201, 202]
    #     force_basic_auth: yes
    #     validate_certs: False
    #     user: "admin"
    #     password: "{{ awx_auth.stdout_lines[1] }}"
    #     body:
    #       name: "{{ set_tower_database_credential_type_name }} - post"
    #       description: "{{ set_tower_database_credential_type_name }} - post"
    #       type: "credential_type"
    #       kind: "cloud"
    #       inputs:
    #         fields:
    #           - id: db_name
    #             type: string
    #             label: DB name
    #             secret: false
    #           - id: db_user_name
    #             type: string
    #             label: DB user name
    #             secret: false
    #           - id: db_user_password
    #             type: string
    #             label: DB user password
    #             secret: true
    #         required:
    #           - db_name
    #           - db_user_name
    #           - db_user_password
    #       injectors:
    #         extra_vars:
    #           db_name: "{{ db_name }}"
    #           db_user_name: "{{ db_user_name }}"
    #           db_user_password : "{{ db_user_password }}"

    # - name: Create Credential Types
      # credential_type:
      #   name: "{{ set_tower_database_credential_type_name }}"
      #   description: "{{ set_tower_database_credential_type_name }}"
      #   kind: cloud
      #   inputs:
      #       fields:
      #         - id: db_name
      #           type: string
      #           label: DB name
      #           secret: false
      #         - id: db_user_name
      #           type: string
      #           label: DB user name
      #           secret: false
      #         - id: db_user_password
      #           type: string
      #           label: DB user password
      #           secret: true
      #       required:
      #         - db_name
      #         - db_user_name
      #         - db_user_password
      #   injectors:
      #     extra_vars:
      #       db_name: "{{ db_name }}"
      #       db_user_name: "{{ db_user_name }}"
      #       db_user_password: "{{ db_user_password }}"
      #   state: present
      #   validate_certs: false
      # environment:
      #   TOWER_HOST: "{{ awx_auth.stdout_lines[0] }}"
      #   TOWER_USERNAME: "admin"
      #   TOWER_PASSWORD: "{{ awx_auth.stdout_lines[1] }}"

    - name: Add Database Credential Types
      credential:
        name: "{{ set_remote_server_database_credentials_name }}"
        description: "{{ set_tower_database_credential_type_name }}"
        organization: "{{ set_tower_organization_name }}"
        state: present
        credential_type: "{{ set_tower_database_credential_type_name }}"
        inputs:
          db_name: "{{ db_name }}"
          db_user_name: "{{ db_user_name }}"
          db_user_password: "{{ db_user_password }}"
      environment:
        TOWER_HOST: "{{ awx_auth.stdout_lines[0] }}"
        TOWER_USERNAME: "admin"
        TOWER_PASSWORD: "{{ awx_auth.stdout_lines[1] }}"
        
    - name: Add SSH key for remote machine
      credential:
        name: "{{ set_remote_server_ssh_key_credentials_name }}"
        description: "{{ set_remote_server_ssh_key_credentials_name }}"
        organization: "{{ set_tower_organization_name }}"
        state: present
        credential_type: Machine
        inputs:
          username: "{{ set_remote_server_ansible_user }}"
          ssh_key_data: "{{ lookup('file', set_remote_server_ssh_key_path ) }}"
          ssh_key_unlock: "{{ set_remote_server_ssh_key_pass }}"
      environment:
        TOWER_HOST: "{{ awx_auth.stdout_lines[0] }}"
        TOWER_USERNAME: "admin"
        TOWER_PASSWORD: "{{ awx_auth.stdout_lines[1] }}"

    - name: Create a Job Template
      job_template:
        name: "{{ set_tower_job_template_name }}"
        description: "{{ set_tower_job_template_name }}"
        project: "{{ set_tower_project_name }}"
        inventory: "{{ set_remote_server_inventory_name }}"
        playbook: "{{ set_tower_job_template_playbook_name }}"
        credentials:
          - "{{ set_remote_server_ssh_key_credentials_name }}"
          - "{{ set_remote_server_database_credentials_name }}"
        state: "present"
        extra_vars:
          db_backup_folder_path: "{{ set_remote_db_backup_folder_path }}"
          local_db_backup_folder_path: "{{ set_local_db_backup_folder_path }}"
          db_file_name_pattern_to_delete: "{{ set_remote_db_file_name_pattern_to_delete }}"
      environment:
        TOWER_HOST: "{{ awx_auth.stdout_lines[0] }}"
        TOWER_USERNAME: "admin"
        TOWER_PASSWORD: "{{ awx_auth.stdout_lines[1] }}"

    - name: Create a Schedule
      schedule:
        name: "{{ set_tower_project_name }} - daily"
        description: "{{ set_tower_project_name }} - daily"
        state: present
        unified_job_template: "{{ set_tower_job_template_name }}"
        rrule: "{{ set_schedule }}"
        validate_certs: false
      environment:
        TOWER_HOST: "{{ awx_auth.stdout_lines[0] }}"
        TOWER_USERNAME: "admin"
        TOWER_PASSWORD: "{{ awx_auth.stdout_lines[1] }}"
